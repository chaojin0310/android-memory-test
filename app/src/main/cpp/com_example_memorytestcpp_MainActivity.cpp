/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class com_example_memorytestcpp_MainActivity */
#include <malloc.h>
#include <android/log.h>
#include <new>

#define LOG_TAG "System.out"
#define LOGI(...) __android_log_print(ANDROID_LOG_INFO, LOG_TAG, __VA_ARGS__)

#ifndef _Included_com_example_memorytest_MainActivity
#define _Included_com_example_memorytest_MainActivity
#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     com_example_memorytestcpp_MainActivity
 * Method:    _checkCpp_manually
 * Signature: ()Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_com_example_memorytest_MainActivity__1checkCpp_1manually
        (JNIEnv *env, jobject instance) {
    int seg_size_MB = 10;
    int MB_size = 1024 * 1024;
    long long usedMemory = 0, allocatedMemory = 0, PreviousUsedMemory = 0;
    char *ptrArray[1024];

    jclass mainActivity = env->FindClass("com/example/memorytest/MainActivity");
    jfieldID usedFieldID = env->GetFieldID(mainActivity, "usedMemory", "J");
    jfieldID allocatedID = env->GetFieldID(mainActivity, "allocatedMemory", "J");

    int i = 0;
    try {
        for (; i < 1024; ++i) {
            char *p = new char[seg_size_MB * MB_size];
            ptrArray[i] = p;
            struct mallinfo mm = mallinfo();
            PreviousUsedMemory = usedMemory;
            usedMemory = (long long) (mm.uordblks) / MB_size;
            if (usedMemory == 0) {  // OOM has occured already
                std::bad_alloc alloc_exception;
                throw alloc_exception;
            }
            allocatedMemory += seg_size_MB;
            LOGI("heap memory used: %lld MB (%lld)", usedMemory, allocatedMemory);
        }
    }
    catch(std::bad_alloc &e) {
        for (int j = 0; j <= i; ++j) {
            delete(ptrArray[j]);
        }
        // Set values
        env->SetLongField(instance, usedFieldID, PreviousUsedMemory);
        env->SetLongField(instance, allocatedID, allocatedMemory);
        env->DeleteLocalRef(mainActivity);
        return env->NewStringUTF("OOM Error(cpp):\n");
    }
    for (int j = 0; j <= i; ++j) {
        delete(ptrArray[j]);
    }
    env->SetLongField(instance, usedFieldID, usedMemory);
    env->SetLongField(instance, allocatedID, allocatedMemory);
    env->DeleteLocalRef(mainActivity);
    return env->NewStringUTF("no OOM:\n");
}

#ifdef __cplusplus
}
#endif
#endif
